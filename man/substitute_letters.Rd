% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/substitute_letters.R
\name{substitute_letters}
\alias{substitute_letters}
\title{Substitute ambiguous/extraordinary letters in nucleic or amino acid sequence or replace default alphabet with a custom encoding}
\usage{
substitute_letters(sq, encoding)
}
\arguments{
\item{sq}{\code{\link{sq}} object.}

\item{indices}{\code{encoding} vector of letters to be replaced together with their replacements.
One letter can be replaced with multiple symbols. 
To perform substitution create a named vector ex. \code{c(A = Ala, H = His, amino_or_nucleic_acid_symbol = replacement)}.}
}
\value{
\code{\link{atpsq}} object of the same type as input sq with replaced alphabet, defined by user.
}
\description{
1) Replace ambigous/extraordinary letters in nucleic or amino acid sequence, 
stored in \code{\link{sq}} object, with the ones that are compliant with 
the IUPAC standard, ones that are user-defined or with \code{NA} values.

2) Replace default amino acid letters in a sequence with a custom encoding 
to create simplified alphabets.

The function is only used to replace letters in the alphabet. 
It cannot be used to merge surrounding characters.
}
\details{
\code{substitute_letters} allows to replace ambigous/extraordinary 
letters in nucleic or amino acid sequence with user-defined or IUPAC symbols. 
Letters can also be replaced with \code{NA} values, so that they can be later 
removed, from the sequence, by \code{clean} function.

\code{substitute_letters} can be used to replace default amino acid letters 
with encodings. They can be user-defined or be derived from various simplified alphabets.

One letter of the alphabet may be replaced by a multiple characters. 

The alphabet characters to be replaced need to be written in capital letters and must originate from default alphabets, otherwise error will be introduced.
Multiple string of letters to be substituted (ex. \code{c(AHG = "replacement")}) will also produce an error.

Replacing multiple letters with the same symbol (ex. \code{c(A = "replacement1", H  = "replacement1", G = "replacement1")}) is allowed.

Created sequence will be deprived of \code{\link{cln})} subtype, if the original sequence possessed it.
This will also occur when the letter to be replaced will not be found in the sequence. It remain unchanged but will lose subclass.

The newly constructed will have a new class \code{\link{cln})}, representing atypical alphabet.

All replaced letters will have the character type.
}
\examples{
# Creating object, called sq to work on:

sq_nuc <- construct_sq(c("TATGAATTAGCTGTCTTTGCTGCTTTGGTTATCTATGA", "CTTTGGTTATCTAGCTGTATGA", 
                        "TATCTAGCTGTATG", "CTGCTG", "CTTAGA", "CCCT", "CTGAATGT"), type = "nuc")

sq_ami <- construct_sq(c("NYMITGGREEYERTVIYRAIALNAANYTWIL", "TIAALGNIIYRAIE", "NYERTGHLI", 
                        "MAYNNNIALN", "MN", "NAAAT"), type = "ami")
                     

# Replace single letter of alphabet with single character encoding:

substitute_letters(sq_nuc, c(T = "t", A = "a", C = "H", G = "Z"))
substitute_letters(sq_nuc, c(T = 1, A = 2, C = 3, G = 4))

substitute_letters(sq_ami, c(M = "m", Q = "g", R = "#", D = "$"))
substitute_letters(sq_ami, c(M = "2", Q = "5", R = "9", D = "7"))


# Replace single letter of alphabet with multiple character encoding:

substitute_letters(sq_nuc, c(T = "th", A = "ad", C = "cy", G = "gu"))
substitute_letters(sq_nuc, c(T = 111, A = 222, C = 333, G = 444))

substitute_letters(sq_ami, c(M = "Met", Q = "Gln", R = "Arg", D = "Asp"))
substitute_letters(sq_ami, c(M = "222", Q = "555", R = "999", D = "777"))


# Use created encoding

enc_nuc <- c(T = "t", A = "a", C = "c", G = "g")
enc_ami <- c(M = "Met", Q = "Gln", R = "Arg", D = "Asp", H = "His", K = "Lys", A = "Ala")

substitute_letters(sq_nuc, enc_nuc)
substitute_letters(sq_ami, enc_ami)


# Use created encoding from other package (ex. \\code{\\link[AmyloGram]{AmyloGram_model}})

library(AmyloGram)

AG_enc_raw <- unlist(AmyloGram_model[["enc"]])

enc_AG <- substr(names(AG_enc_raw), 1, 1)
names(enc_AG) <- toupper(AG_enc_raw)
enc_AG 

sq_ami <- construct_sq(c("NYMITGGREEYERTVIYRAIALNAANYTWIL", "TIAALGNIIYRAIE", "NYERTGHLI", 
                        "MAYNNNIALN", "MN", "NAAAT"), type = "ami")
substitute_letters(sq_ami, enc_AG)

}
\seealso{
sq atpsq
}
