% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/substitute_letters.R
\name{substitute_letters}
\alias{substitute_letters}
\alias{substitute_letters.sq}
\title{Substitute letters in a sequence}
\usage{
substitute_letters(x, encoding, ...)

\method{substitute_letters}{sq}(x, encoding, ..., NA_letter = getOption("tidysq_NA_letter"))
}
\arguments{
\item{x}{[\code{sq}]\cr
An object this function is applied to.}

\item{encoding}{[\code{character} || \code{numeric}]\cr
A dictionary (named vector), where names are letters to be replaced and
elements are their respective replacements.}

\item{...}{further arguments to be passed from or to other methods.}

\item{NA_letter}{[\code{character(1)}]\cr
A string that is used to interpret and display \code{NA} value in the
context of \code{\link[=sq-class]{sq class}}. Default value equals to
"\code{!}".}
}
\value{
An \code{\link[=sq-class]{sq}} object of \strong{atp} type with
updated alphabet.
}
\description{
Replaces all occurrfuences of a letter with another.
}
\details{
\code{substitute_letters} allows to replace unwanted letters in any sequence
with user-defined or IUPAC  symbols. Letters can also be replaced with
\code{\link{NA}} values, so that they  can be later removed from the sequence
by \code{\link{remove_na}} function.

It doesn't matter whether replaced or replacing letter is single or multiple
character. However, the user cannot replace multiple letters with one nor one
letter with more than one.

Of course, multiple different letters can be encoded to the same symbol, so
\code{c(A = "rep1", H = "rep1", G = "rep1")} is allowed, but
\code{c(AHG = "rep1")} is not (unless there is a letter "\code{AHG}" in
the alphabet). By doing that any information of separateness of original
letters is lost, so it isn't possible to retrieve original sequence after
this operation.

All encoding names must be letters contained within the alphabet, otherwise
an error will be thrown.
}
\examples{
# Creating objects to work on:
sq_dna <- sq(c("ATGCAGGA", "GACCGAACGAN", "TGACGAGCTTA", "ACTNNAGCN"),
             alphabet = "dna_ext")
sq_ami <- sq(c("MIOONYTWIL","TIOOLGNIIYROIE", "NYERTGHLI", "MOYXXXIOLN"),
             alphabet = "ami_ext")
sq_atp <- sq(c("mALPVQAmAmA", "mAmAPQ"), alphabet = c("mA", LETTERS))

# Not all letters must have their encoding specified:
substitute_letters(sq_dna, c(T = "t", A = "a", C = "c", G = "g"))
substitute_letters(sq_ami, c(M = "X"))

# Multiple character letters are supported in encodings:
substitute_letters(sq_atp, c(mA = "-"))
substitute_letters(sq_ami, c(I = "ough", O = "eau"))

# Numeric substitutions are allowed too, these are coerced to characters:
substitute_letters(sq_dna, c(N = 9, G = 7))

# It's possible to replace a letter with NA value:
substitute_letters(sq_ami, c(X = NA_character_))

}
\seealso{
Functions that manipulate type of sequences:
\code{\link{find_invalid_letters}()},
\code{\link{is.sq}()},
\code{\link{sq_type}()},
\code{\link{typify}()}
}
\concept{type_functions}
