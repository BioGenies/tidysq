% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sqapply.R
\name{sqapply}
\alias{sqapply}
\title{Apply function to each sequence}
\usage{
sqapply(sq, fun, ..., paste_char = FALSE, use_na_letter = paste_char)
}
\arguments{
\item{sq}{a \code{\link{sq}} object.}

\item{fun}{a \code{\link{function}} to apply to each sequence in \code{sq} object; it should
take a character vector, numeric vector or single character string as an input.}

\item{...}{another arguments passed to \code{fun}.}

\item{paste_char}{a \code{\link{logical}} value indicating in which form sequences should be
passed to the function \code{fun}; if \code{FALSE} (default), they will be treated as character
vectors, if \code{TRUE}, they will be pasted into a single string.}

\item{use_na_letter}{a \code{\link{logical}} value indicating whether to use a printing character
to represent \code{\link{NA}} values; if \code{TRUE}, letter from option "tidysq_p_na_letter"
will be used instead of \code{NA} values (default value for this option is "!", for details
see \code{\link{tidysq-options}}), otherwise just \code{NA} values will be used; default value
for this parameter is equal to \code{paste_char} value; \code{use_na_letter} cannot be
\code{FALSE} if \code{paste_char} is \code{TRUE}.}
}
\value{
A list of values returned by function for each sequence in corresponding order.
}
\description{
Applies given function to each sequence. Sequences are passed to function as character vectors
(or numeric, if type of \code{sq} is \strong{enc}) or single character strings, depending on 
parameter.
}
\examples{
sq_ami <- construct_sq(c("YCYWIFTSRIK", "GGWGDVKCG", "KTKHIEQKL"))

# count how many times "K" appears in each sequence:
sqapply(sq_ami, function(sequence) sum(sequence == "K"))

# duplicate each element of sequence, then paste it and construct new sq
duplicated <- sqapply(sq_ami, function(sequence) paste(rep(sequence, each = 2), collapse = ""))
construct_sq(unlist(duplicated))

}
\seealso{
\code{\link{sq}} \code{\link[base]{lapply}}
}
