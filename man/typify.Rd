% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/typify.R
\name{typify}
\alias{typify}
\title{Set type of untyped and atypical sequences}
\usage{
typify(x, dest_type, NA_letter = getOption("tidysq_NA_letter"), ...)
}
\arguments{
\item{x}{an object of class \code{\link{sq}} with one of the types \strong{ami},
\strong{dna}, \strong{rna}, \strong{unt} or \strong{atp}.}

\item{dest_type}{\code{\link{character}} string, destination type, one of "ami",
"dna" or "rna".}
}
\value{
An object of class \code{sq} that represents the same sequences as input \code{sq},
but with type as specified in \code{dest_type}.
}
\description{
Function to set type of \strong{atp} or \strong{unt} sequences to \strong{ami},
\strong{dna} or \strong{rna} provided that they do not have invalid letters
(which can be checked using \code{\link{get_sq_alphabet}} and
\code{\link{get_invalid_letters}}).
}
\details{
Sometimes during reading \code{sq} from fasta file (using \code{\link{read_fasta}}) or 
constructing from character vector (using \code{\link{construct_sq}} or 
\code{\link{as.character}}) there are letters that are not in standard alphabets (see
\code{\link{aminoacids_df}} and \code{\link{nucleotides_df}}). In consequence, newly created
\code{sq} objects might have other type - \strong{atp} or \strong{unt}. After removal of those
non-standard letters (using \code{\link{substitute_letters}}), user might want to set type of 
\code{sq} object to one of standard types - \strong{ami}, \strong{dna} and \strong{rna} -
as this is demanded by some functions. This is what this function is designed for.

If \code{dest_type} is equal to type of \code{sq}, function does not do anything.

If \code{sq} object contain letters that are not in specified destination alphabet, an error 
will be thrown. However, \code{typify} converts automatically lowercase letters to uppercase
letters, so e.g. "a" is treated as element of amino acid alphabet.

If \code{sq} contains both lower and uppercase letters, they will be converted to uppercase, but
a message informing about it will be printed in the console. This action is default and can
be changed in package options (see \code{\link{tidysq-options}}).

Output \code{sq} object will not have \strong{cln} subtype, even if all letters of it fit in
clean alphabet of destination type (with exception of passing already clean object as input).
}
\examples{
# constructing artificial sq object with strange characters - type will be "unt"
sq_unt <- construct_sq(c("&VPLG&#", "##LCG"))

# substituting letters with "X", which stands for unknown amino acid
sq_sub <- substitute_letters(sq_unt, c(`&` = "X", `#` = "X"))

# setting type
typify(sq_sub, "ami")

}
